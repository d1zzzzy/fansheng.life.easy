{"title":"代码随想录算法训练营第一天| 704. 二分查找、27. 移除元素","date":"2023-11-29T07:37:41.000Z","date_formatted":{"ll":"2023年11月29日","L":"2023/11/29","MM-DD":"11-29"},"thumbnail":"/fansheng.life.easy/images/code-camp-day01.png","link":"2023/11/29/CodeCampDay01","tags":["Algorithm","Array"],"categories":["Algorithm","Tech"],"updated":"2023-11-29T11:16:34.251Z","content":"<h1 id=\"代码随想录算法训练营第一天\">代码随想录算法训练营第一天<a title=\"#代码随想录算法训练营第一天\" href=\"#代码随想录算法训练营第一天\"></a></h1>\n<blockquote>\n<p>算法: 在数学（算学）和计算机科学之中，指一个被定义好的、计算机可施行其指示的有限步骤或次序，常用于计算、数据处理和自动推理。算法是有效方法，包含一系列定义清晰的指令，并可于有限的时间及空间内清楚的表述出来。</p>\n</blockquote>\n<p>今天开始复习算法内容，顺便结合算法题回想一下数学知识。格式大概为：算法题目、数学联想、思路、代码、复杂度分析。</p>\n<h2 id=\"二分查找\">二分查找<a title=\"#二分查找\" href=\"#二分查找\"></a></h2>\n<h3 id=\"前提/已知\">前提/已知<a title=\"#前提/已知\" href=\"#前提/已知\"></a></h3>\n<p>一般来说，二分查找依赖于以下前提或已知：</p>\n<ul>\n<li>数组是升序的</li>\n<li>数组是有限的</li>\n</ul>\n<p>查找某个 <code>target</code> 可以当成求出 <code>y = target</code> 在 <code>x ∈ [0, n)</code> 区间内与函数的交点。</p>\n<blockquote>\n<h3 id=\"数学联想\">数学联想<a title=\"#数学联想\" href=\"#数学联想\"></a></h3>\n<p>由于数组下标是递增的，数组本身也是递增的，所以可以把下标当成 x 轴<br>\n数组元素即可以看成一个在某个区域内关于某个映射（函数）的值域<br>\n查找的目标值即为求 <code>y = target</code> 与函数的交点<br>\n数学意义也就是解方程 <code>f(x) - target = 0</code><br>\n但是这个映射是随机的，所以无法通过解方程的方式求出交点，只能用类似 <strong>中值定理</strong> 的方式求出交点</p>\n</blockquote>\n<h3 id=\"思路\">思路<a title=\"#思路\" href=\"#思路\"></a></h3>\n<p>下标值范围为: <code>[0, length) = [0, length - 1]</code> (下标为整数);</p>\n<ol>\n<li>如果左侧端点已经比目标值大，此时可以直接返回 -1</li>\n<li>取中点的值判断<br>\n3. 如果该值等于目标值，则得到结果<br>\n4. 如果该值比目标值大，则目标值在 <code>[0, mid]</code> 区间内， 重复步骤 2<br>\n5. 如果该值比目标值小，则目标值在 <code>[mid, length - 1]</code> 区间内， 重复步骤 2</li>\n</ol>\n<h4 id=\"解法一：区域取-[0,-length---1]\">解法一：区域取 [0, length - 1]<a title=\"#解法一：区域取-[0,-length---1]\" href=\"#解法一：区域取-[0,-length---1]\"></a></h4>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">search</span>(<span class=\"params\">nums: <span class=\"built_in\">number</span>[], target: <span class=\"built_in\">number</span></span>): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 初始区间范围</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> right = nums.<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 由于区间范围是 [0, length - 1]，所以当 left === right 时，区间范围为 [left, left]，即只有一个元素</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 取中点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> mid = left + ((right - left) &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (nums[mid] === target) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[mid] &gt; target) &#123;</span><br><span class=\"line\">\t\t\tright = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tleft = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"解法二：区域取-[0,-length)\">解法二：区域取 [0, length)<a title=\"#解法二：区域取-[0,-length)\" href=\"#解法二：区域取-[0,-length)\"></a></h4>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">search</span>(<span class=\"params\">nums: <span class=\"built_in\">number</span>[], target: <span class=\"built_in\">number</span></span>): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 初始区间范围</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> right = nums.<span class=\"property\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 由于区间范围是 [0, length)，所以退出条件是当 left === right - 1 时，区间范围为 [left, right)，即只有一个元素</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 取中点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> mid = left + ((right - left) &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (nums[mid] === target) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[mid] &gt; target) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 区别：因为右边界是开区间下一轮不会进入判断，所以这里不需要减一</span></span><br><span class=\"line\">\t\t\tright = mid;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tleft = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"复杂度分析\">复杂度分析<a title=\"#复杂度分析\" href=\"#复杂度分析\"></a></h4>\n<p>两种解法的空间和时间复杂度都是:</p>\n<ul>\n<li>空间复杂度：O(1)</li>\n<li>时间复杂度：O(logn)</li>\n</ul>\n<h2 id=\"移除元素\">移除元素<a title=\"#移除元素\" href=\"#移除元素\"></a></h2>\n<h3 id=\"思路-1\">思路<a title=\"#思路-1\" href=\"#思路-1\"></a></h3>\n<p>移除数组中的某个元素，可以看成是把数组中的某个元素移动到数组末尾，然后把数组末尾的元素删除。</p>\n<h3 id=\"解法一：暴力解法\">解法一：暴力解法<a title=\"#解法一：暴力解法\" href=\"#解法一：暴力解法\"></a></h3>\n<p>暴力解法的本质是：遍历数组，如果当前元素等于目标值，则把当前元素后面的元素向前移动一位，然后数组长度减一，并且重复这个操作。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">removeElement</span>(<span class=\"params\">nums: <span class=\"built_in\">number</span>[], val: <span class=\"built_in\">number</span></span>): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 遍历数组</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">\t  <span class=\"comment\">// 如果当前元素等于目标值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[i] === val) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; nums.<span class=\"property\">length</span>; j++) &#123;</span><br><span class=\"line\">        nums[j - <span class=\"number\">1</span>] = nums[j];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      i--;</span><br><span class=\"line\">      nums.<span class=\"property\">length</span>--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> nums.<span class=\"property\">length</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"复杂度分析-1\">复杂度分析<a title=\"#复杂度分析-1\" href=\"#复杂度分析-1\"></a></h4>\n<ul>\n<li>空间复杂度：O(1)</li>\n<li>时间复杂度：O(n^2)</li>\n</ul>\n<h3 id=\"解法二：快慢指针\">解法二：快慢指针<a title=\"#解法二：快慢指针\" href=\"#解法二：快慢指针\"></a></h3>\n<p>双指针解法的本质：交换数组中两项的位置，而至于应该删除的数据全会被移到数组末端，如果需要删除的话，统计一下目标值的数量然后 <code>arr.length = arr.length - sum</code> 即可。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">removeElement</span>(<span class=\"params\">nums: <span class=\"built_in\">number</span>[], val: <span class=\"built_in\">number</span></span>): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 慢指针</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> slow = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 快指针</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> fast = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (fast &lt; nums.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果快指针指向的元素不等于目标值</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (nums[fast] !== val) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 把快指针指向的元素赋值给慢指针指向的元素</span></span><br><span class=\"line\">\t\t\tnums[slow] = nums[fast];</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 慢指针向后移动一位</span></span><br><span class=\"line\">\t\t\tslow++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 快指针向后移动一位</span></span><br><span class=\"line\">\t\tfast++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> slow;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"复杂度分析-2\">复杂度分析<a title=\"#复杂度分析-2\" href=\"#复杂度分析-2\"></a></h4>\n<ul>\n<li>空间复杂度：O(1)</li>\n<li>时间复杂度：O(n)</li>\n</ul>\n","plink":"https://d1zzzzy.github.io/fansheng.life.easy/2023/11/29/CodeCampDay01/","toc":[{"id":"代码随想录算法训练营第一天","title":"代码随想录算法训练营第一天","index":"1","children":[{"id":"二分查找","title":"二分查找","index":"1.1","children":[{"id":"前提/已知","title":"前提&#x2F;已知","index":"1.1.1"},{"id":"数学联想","title":"数学联想","index":"1.1.2"},{"id":"思路","title":"思路","index":"1.1.3"}]},{"id":"移除元素","title":"移除元素","index":"1.2","children":[{"id":"思路-1","title":"思路","index":"1.2.1"},{"id":"解法一：暴力解法","title":"解法一：暴力解法","index":"1.2.2"},{"id":"解法二：快慢指针","title":"解法二：快慢指针","index":"1.2.3"}]}]}],"reading_time":"1157 字约 8 分钟"}